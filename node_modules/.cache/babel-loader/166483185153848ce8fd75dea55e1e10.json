{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction BaseInput(props) {\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!props.id) {\n    console.log(\"No id for\", props);\n    throw new Error(\"no id for props \".concat(JSON.stringify(props)));\n  }\n\n  var value = props.value,\n      readonly = props.readonly,\n      disabled = props.disabled,\n      autofocus = props.autofocus,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      options = props.options,\n      schema = props.schema,\n      uiSchema = props.uiSchema,\n      formContext = props.formContext,\n      registry = props.registry,\n      rawErrors = props.rawErrors,\n      inputProps = _objectWithoutProperties(props, [\"value\", \"readonly\", \"disabled\", \"autofocus\", \"onBlur\", \"onFocus\", \"options\", \"schema\", \"uiSchema\", \"formContext\", \"registry\", \"rawErrors\"]); // If options.inputType is set use that as the input type\n\n\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!inputProps.type) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === \"number\") {\n      inputProps.type = \"number\"; // Setting step to 'any' fixes a bug in Safari where decimals are not\n      // allowed in number inputs\n\n      inputProps.step = \"any\";\n    } else if (schema.type === \"integer\") {\n      inputProps.type = \"number\"; // Since this is integer, you always want to step up or down in multiples\n      // of 1\n\n      inputProps.step = \"1\";\n    } else {\n      inputProps.type = \"text\";\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  } // If multipleOf is defined, use this as the step value. This mainly improves\n  // the experience for keyboard users (who can use the up/down KB arrows).\n\n\n  if (schema.multipleOf) {\n    inputProps.step = schema.multipleOf;\n  }\n\n  if (typeof schema.minimum !== \"undefined\") {\n    inputProps.min = schema.minimum;\n  }\n\n  if (typeof schema.maximum !== \"undefined\") {\n    inputProps.max = schema.maximum;\n  }\n\n  var _onChange = function _onChange(_ref) {\n    var value = _ref.target.value;\n    return props.onChange(value === \"\" ? options.emptyValue : value);\n  };\n\n  return [React.createElement(\"input\", _extends({\n    key: inputProps.id,\n    className: \"form-control\",\n    readOnly: readonly,\n    disabled: disabled,\n    autoFocus: autofocus,\n    value: value == null ? \"\" : value\n  }, inputProps, {\n    list: schema.examples ? \"examples_\".concat(inputProps.id) : null,\n    onChange: _onChange,\n    onBlur: onBlur && function (event) {\n      return onBlur(inputProps.id, event.target.value);\n    },\n    onFocus: onFocus && function (event) {\n      return onFocus(inputProps.id, event.target.value);\n    }\n  })), schema.examples ? React.createElement(\"datalist\", {\n    key: \"datalist_\".concat(inputProps.id),\n    id: \"examples_\".concat(inputProps.id)\n  }, _toConsumableArray(new Set(schema.examples.concat(schema[\"default\"] ? [schema[\"default\"]] : []))).map(function (example) {\n    return React.createElement(\"option\", {\n      key: example,\n      value: example\n    });\n  })) : null];\n}\n\nBaseInput.defaultProps = {\n  required: false,\n  disabled: false,\n  readonly: false,\n  autofocus: false\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  BaseInput.propTypes = {\n    id: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    value: PropTypes.any,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    onFocus: PropTypes.func\n  };\n}\n\nexport default BaseInput;","map":{"version":3,"mappings":"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","names":["React","PropTypes","BaseInput","props","id","console","log","Error","JSON","stringify","value","readonly","disabled","autofocus","onBlur","onFocus","options","schema","uiSchema","formContext","registry","rawErrors","inputProps","inputType","type","step","autocomplete","autoComplete","multipleOf","minimum","min","maximum","max","_onChange","target","onChange","emptyValue","key","className","readOnly","autoFocus","list","examples","event","_toConsumableArray","Set","concat","map","example","defaultProps","required","process","env","NODE_ENV","propTypes","string","isRequired","placeholder","any","bool","func"],"sources":["/core/src/components/widgets/BaseInput.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction BaseInput(props) {\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!props.id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const {\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    ...inputProps\n  } = props;\n\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!inputProps.type) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === \"number\") {\n      inputProps.type = \"number\";\n      // Setting step to 'any' fixes a bug in Safari where decimals are not\n      // allowed in number inputs\n      inputProps.step = \"any\";\n    } else if (schema.type === \"integer\") {\n      inputProps.type = \"number\";\n      // Since this is integer, you always want to step up or down in multiples\n      // of 1\n      inputProps.step = \"1\";\n    } else {\n      inputProps.type = \"text\";\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n\n  // If multipleOf is defined, use this as the step value. This mainly improves\n  // the experience for keyboard users (who can use the up/down KB arrows).\n  if (schema.multipleOf) {\n    inputProps.step = schema.multipleOf;\n  }\n\n  if (typeof schema.minimum !== \"undefined\") {\n    inputProps.min = schema.minimum;\n  }\n\n  if (typeof schema.maximum !== \"undefined\") {\n    inputProps.max = schema.maximum;\n  }\n\n  const _onChange = ({ target: { value } }) => {\n    return props.onChange(value === \"\" ? options.emptyValue : value);\n  };\n\n  return [\n    <input\n      key={inputProps.id}\n      className=\"form-control\"\n      readOnly={readonly}\n      disabled={disabled}\n      autoFocus={autofocus}\n      value={value == null ? \"\" : value}\n      {...inputProps}\n      list={schema.examples ? `examples_${inputProps.id}` : null}\n      onChange={_onChange}\n      onBlur={onBlur && (event => onBlur(inputProps.id, event.target.value))}\n      onFocus={onFocus && (event => onFocus(inputProps.id, event.target.value))}\n    />,\n    schema.examples ? (\n      <datalist\n        key={`datalist_${inputProps.id}`}\n        id={`examples_${inputProps.id}`}>\n        {[\n          ...new Set(\n            schema.examples.concat(schema.default ? [schema.default] : [])\n          ),\n        ].map(example => (\n          <option key={example} value={example} />\n        ))}\n      </datalist>\n    ) : null,\n  ];\n}\n\nBaseInput.defaultProps = {\n  required: false,\n  disabled: false,\n  readonly: false,\n  autofocus: false,\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  BaseInput.propTypes = {\n    id: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    value: PropTypes.any,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    onFocus: PropTypes.func,\n  };\n}\n\nexport default BaseInput;\n"]},"metadata":{},"sourceType":"module"}