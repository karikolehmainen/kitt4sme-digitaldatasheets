{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport { default as DefaultErrorList } from \"./ErrorList\";\nimport { getDefaultFormState, retrieveSchema, shouldRender, toIdSchema, getDefaultRegistry, deepEquals, toPathSchema, isObject } from \"../utils\";\nimport validateFormData, { toErrorList } from \"../validate\";\nimport { mergeObjects } from \"../utils\";\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inherits(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getUsedFormData\", function (formData, fields) {\n      //for the case of a single input form\n      if (fields.length === 0 && _typeof(formData) !== \"object\") {\n        return formData;\n      }\n\n      var data = _pick(formData, fields);\n\n      if (Array.isArray(formData)) {\n        return Object.keys(data).map(function (key) {\n          return data[key];\n        });\n      }\n\n      return data;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFieldNames\", function (pathSchema, formData) {\n      var getAllPaths = function getAllPaths(_obj) {\n        var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var paths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [\"\"];\n        Object.keys(_obj).forEach(function (key) {\n          if (_typeof(_obj[key]) === \"object\") {\n            var newPaths = paths.map(function (path) {\n              return \"\".concat(path, \".\").concat(key);\n            }); // If an object is marked with additionalProperties, all its keys are valid\n\n            if (_obj[key].__rjsf_additionalProperties && _obj[key].$name !== \"\") {\n              acc.push(_obj[key].$name);\n            } else {\n              getAllPaths(_obj[key], acc, newPaths);\n            }\n          } else if (key === \"$name\" && _obj[key] !== \"\") {\n            paths.forEach(function (path) {\n              path = path.replace(/^\\./, \"\");\n\n              var formValue = _get(formData, path); // adds path to fieldNames if it points to a value\n              // or an empty object/array\n\n\n              if (_typeof(formValue) !== \"object\" || _isEmpty(formValue)) {\n                acc.push(path);\n              }\n            });\n          }\n        });\n        return acc;\n      };\n\n      return getAllPaths(pathSchema);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (formData, newErrorSchema) {\n      if (isObject(formData) || Array.isArray(formData)) {\n        var newState = _this.getStateFromProps(_this.props, formData);\n\n        formData = newState.formData;\n      }\n\n      var mustValidate = !_this.props.noValidate && _this.props.liveValidate;\n      var state = {\n        formData: formData\n      };\n      var newFormData = formData;\n\n      if (_this.props.omitExtraData === true && _this.props.liveOmit === true) {\n        var retrievedSchema = retrieveSchema(_this.state.schema, _this.state.schema, formData);\n        var pathSchema = toPathSchema(retrievedSchema, \"\", _this.state.schema, formData);\n\n        var fieldNames = _this.getFieldNames(pathSchema, formData);\n\n        newFormData = _this.getUsedFormData(formData, fieldNames);\n        state = {\n          formData: newFormData\n        };\n      }\n\n      if (mustValidate) {\n        var schemaValidation = _this.validate(newFormData);\n\n        var errors = schemaValidation.errors;\n        var errorSchema = schemaValidation.errorSchema;\n        var schemaValidationErrors = errors;\n        var schemaValidationErrorSchema = errorSchema;\n\n        if (_this.props.extraErrors) {\n          errorSchema = mergeObjects(errorSchema, _this.props.extraErrors, !!\"concat arrays\");\n          errors = toErrorList(errorSchema);\n        }\n\n        state = {\n          formData: newFormData,\n          errors: errors,\n          errorSchema: errorSchema,\n          schemaValidationErrors: schemaValidationErrors,\n          schemaValidationErrorSchema: schemaValidationErrorSchema\n        };\n      } else if (!_this.props.noValidate && newErrorSchema) {\n        var _errorSchema = _this.props.extraErrors ? mergeObjects(newErrorSchema, _this.props.extraErrors, !!\"concat arrays\") : newErrorSchema;\n\n        state = {\n          formData: newFormData,\n          errorSchema: _errorSchema,\n          errors: toErrorList(_errorSchema)\n        };\n      }\n\n      _this.setState(state, function () {\n        return _this.props.onChange && _this.props.onChange(_this.state);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function () {\n      if (_this.props.onBlur) {\n        var _this$props;\n\n        (_this$props = _this.props).onBlur.apply(_this$props, arguments);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function () {\n      if (_this.props.onFocus) {\n        var _this$props2;\n\n        (_this$props2 = _this.props).onFocus.apply(_this$props2, arguments);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (event) {\n      event.preventDefault();\n\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      event.persist();\n      var newFormData = _this.state.formData;\n\n      if (_this.props.omitExtraData === true) {\n        var retrievedSchema = retrieveSchema(_this.state.schema, _this.state.schema, newFormData);\n        var pathSchema = toPathSchema(retrievedSchema, \"\", _this.state.schema, newFormData);\n\n        var fieldNames = _this.getFieldNames(pathSchema, newFormData);\n\n        newFormData = _this.getUsedFormData(newFormData, fieldNames);\n      }\n\n      if (!_this.props.noValidate) {\n        var schemaValidation = _this.validate(newFormData);\n\n        var _errors = schemaValidation.errors;\n        var _errorSchema2 = schemaValidation.errorSchema;\n        var schemaValidationErrors = _errors;\n        var schemaValidationErrorSchema = _errorSchema2;\n\n        if (Object.keys(_errors).length > 0) {\n          if (_this.props.extraErrors) {\n            _errorSchema2 = mergeObjects(_errorSchema2, _this.props.extraErrors, !!\"concat arrays\");\n            _errors = toErrorList(_errorSchema2);\n          }\n\n          _this.setState({\n            errors: _errors,\n            errorSchema: _errorSchema2,\n            schemaValidationErrors: schemaValidationErrors,\n            schemaValidationErrorSchema: schemaValidationErrorSchema\n          }, function () {\n            if (_this.props.onError) {\n              _this.props.onError(_errors);\n            } else {\n              console.error(\"Form validation failed\", _errors);\n            }\n          });\n\n          return;\n        }\n      } // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n\n\n      var errorSchema;\n      var errors;\n\n      if (_this.props.extraErrors) {\n        errorSchema = _this.props.extraErrors;\n        errors = toErrorList(errorSchema);\n      } else {\n        errorSchema = {};\n        errors = [];\n      }\n\n      _this.setState({\n        formData: newFormData,\n        errors: errors,\n        errorSchema: errorSchema,\n        schemaValidationErrors: [],\n        schemaValidationErrorSchema: {}\n      }, function () {\n        if (_this.props.onSubmit) {\n          _this.props.onSubmit(_objectSpread({}, _this.state, {\n            formData: newFormData,\n            status: \"submitted\"\n          }), event);\n        }\n      });\n    });\n\n    _this.state = _this.getStateFromProps(props, props.formData);\n\n    if (_this.props.onChange && !deepEquals(_this.state.formData, _this.props.formData)) {\n      _this.props.onChange(_this.state);\n    }\n\n    _this.formElement = null;\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var nextState = this.getStateFromProps(nextProps, nextProps.formData);\n\n      if (!deepEquals(nextState.formData, nextProps.formData) && !deepEquals(nextState.formData, this.state.formData) && this.props.onChange) {\n        this.props.onChange(nextState);\n      }\n\n      this.setState(nextState);\n    }\n  }, {\n    key: \"getStateFromProps\",\n    value: function getStateFromProps(props, inputFormData) {\n      var state = this.state || {};\n      var schema = \"schema\" in props ? props.schema : this.props.schema;\n      var uiSchema = \"uiSchema\" in props ? props.uiSchema : this.props.uiSchema;\n      var edit = typeof inputFormData !== \"undefined\";\n      var liveValidate = \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n      var mustValidate = edit && !props.noValidate && liveValidate;\n      var rootSchema = schema;\n      var formData = getDefaultFormState(schema, inputFormData, rootSchema);\n      var retrievedSchema = retrieveSchema(schema, rootSchema, formData);\n      var customFormats = props.customFormats;\n      var additionalMetaSchemas = props.additionalMetaSchemas;\n\n      var getCurrentErrors = function getCurrentErrors() {\n        if (props.noValidate) {\n          return {\n            errors: [],\n            errorSchema: {}\n          };\n        } else if (!props.liveValidate) {\n          return {\n            errors: state.schemaValidationErrors || [],\n            errorSchema: state.schemaValidationErrorSchema || {}\n          };\n        }\n\n        return {\n          errors: state.errors || [],\n          errorSchema: state.errorSchema || {}\n        };\n      };\n\n      var errors, errorSchema, schemaValidationErrors, schemaValidationErrorSchema;\n\n      if (mustValidate) {\n        var schemaValidation = this.validate(formData, schema, additionalMetaSchemas, customFormats);\n        errors = schemaValidation.errors;\n        errorSchema = schemaValidation.errorSchema;\n        schemaValidationErrors = errors;\n        schemaValidationErrorSchema = errorSchema;\n      } else {\n        var currentErrors = getCurrentErrors();\n        errors = currentErrors.errors;\n        errorSchema = currentErrors.errorSchema;\n        schemaValidationErrors = state.schemaValidationErrors;\n        schemaValidationErrorSchema = state.schemaValidationErrorSchema;\n      }\n\n      if (props.extraErrors) {\n        errorSchema = mergeObjects(errorSchema, props.extraErrors, !!\"concat arrays\");\n        errors = toErrorList(errorSchema);\n      }\n\n      var idSchema = toIdSchema(retrievedSchema, uiSchema[\"ui:rootFieldId\"], rootSchema, formData, props.idPrefix);\n      var nextState = {\n        schema: schema,\n        uiSchema: uiSchema,\n        idSchema: idSchema,\n        formData: formData,\n        edit: edit,\n        errors: errors,\n        errorSchema: errorSchema,\n        additionalMetaSchemas: additionalMetaSchemas\n      };\n\n      if (schemaValidationErrors) {\n        nextState.schemaValidationErrors = schemaValidationErrors;\n        nextState.schemaValidationErrorSchema = schemaValidationErrorSchema;\n      }\n\n      return nextState;\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return shouldRender(this, nextProps, nextState);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(formData) {\n      var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.schema;\n      var additionalMetaSchemas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props.additionalMetaSchemas;\n      var customFormats = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.props.customFormats;\n      var _this$props3 = this.props,\n          validate = _this$props3.validate,\n          transformErrors = _this$props3.transformErrors;\n\n      var _this$getRegistry = this.getRegistry(),\n          rootSchema = _this$getRegistry.rootSchema;\n\n      var resolvedSchema = retrieveSchema(schema, rootSchema, formData);\n      return validateFormData(formData, resolvedSchema, validate, transformErrors, additionalMetaSchemas, customFormats);\n    }\n  }, {\n    key: \"renderErrors\",\n    value: function renderErrors() {\n      var _this$state = this.state,\n          errors = _this$state.errors,\n          errorSchema = _this$state.errorSchema,\n          schema = _this$state.schema,\n          uiSchema = _this$state.uiSchema;\n      var _this$props4 = this.props,\n          ErrorList = _this$props4.ErrorList,\n          showErrorList = _this$props4.showErrorList,\n          formContext = _this$props4.formContext;\n\n      if (errors.length && showErrorList != false) {\n        return React.createElement(ErrorList, {\n          errors: errors,\n          errorSchema: errorSchema,\n          schema: schema,\n          uiSchema: uiSchema,\n          formContext: formContext\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getRegistry\",\n    value: function getRegistry() {\n      // For BC, accept passed SchemaField and TitleField props and pass them to\n      // the \"fields\" registry one.\n      var _getDefaultRegistry = getDefaultRegistry(),\n          fields = _getDefaultRegistry.fields,\n          widgets = _getDefaultRegistry.widgets;\n\n      return {\n        fields: _objectSpread({}, fields, this.props.fields),\n        widgets: _objectSpread({}, widgets, this.props.widgets),\n        ArrayFieldTemplate: this.props.ArrayFieldTemplate,\n        ObjectFieldTemplate: this.props.ObjectFieldTemplate,\n        FieldTemplate: this.props.FieldTemplate,\n        definitions: this.props.schema.definitions || {},\n        rootSchema: this.props.schema,\n        formContext: this.props.formContext || {}\n      };\n    }\n  }, {\n    key: \"submit\",\n    value: function submit() {\n      if (this.formElement) {\n        this.formElement.dispatchEvent(new CustomEvent(\"submit\", {\n          cancelable: true\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          id = _this$props5.id,\n          idPrefix = _this$props5.idPrefix,\n          className = _this$props5.className,\n          tagName = _this$props5.tagName,\n          name = _this$props5.name,\n          method = _this$props5.method,\n          target = _this$props5.target,\n          action = _this$props5.action,\n          deprecatedAutocomplete = _this$props5.autocomplete,\n          currentAutoComplete = _this$props5.autoComplete,\n          enctype = _this$props5.enctype,\n          acceptcharset = _this$props5.acceptcharset,\n          noHtml5Validate = _this$props5.noHtml5Validate,\n          disabled = _this$props5.disabled,\n          readonly = _this$props5.readonly,\n          formContext = _this$props5.formContext;\n      var _this$state2 = this.state,\n          schema = _this$state2.schema,\n          uiSchema = _this$state2.uiSchema,\n          formData = _this$state2.formData,\n          errorSchema = _this$state2.errorSchema,\n          idSchema = _this$state2.idSchema;\n      var registry = this.getRegistry();\n      var _SchemaField = registry.fields.SchemaField;\n      var FormTag = tagName ? tagName : \"form\";\n\n      if (deprecatedAutocomplete) {\n        console.warn(\"Using autocomplete property of Form is deprecated, use autoComplete instead.\");\n      }\n\n      var autoComplete = currentAutoComplete ? currentAutoComplete : deprecatedAutocomplete;\n      return React.createElement(FormTag, {\n        className: className ? className : \"rjsf\",\n        id: id,\n        name: name,\n        method: method,\n        target: target,\n        action: action,\n        autoComplete: autoComplete,\n        encType: enctype,\n        acceptCharset: acceptcharset,\n        noValidate: noHtml5Validate,\n        onSubmit: this.onSubmit,\n        ref: function ref(form) {\n          _this2.formElement = form;\n        }\n      }, this.renderErrors(), React.createElement(_SchemaField, {\n        schema: schema,\n        uiSchema: uiSchema,\n        errorSchema: errorSchema,\n        idSchema: idSchema,\n        idPrefix: idPrefix,\n        formContext: formContext,\n        formData: formData,\n        onChange: this.onChange,\n        onBlur: this.onBlur,\n        onFocus: this.onFocus,\n        registry: registry,\n        disabled: disabled,\n        readonly: readonly\n      }), children ? children : React.createElement(\"div\", null, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-info\"\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Form;\n}(Component);\n\n_defineProperty(Form, \"defaultProps\", {\n  uiSchema: {},\n  noValidate: false,\n  liveValidate: false,\n  disabled: false,\n  readonly: false,\n  noHtml5Validate: false,\n  ErrorList: DefaultErrorList,\n  omitExtraData: false\n});\n\nexport { Form as default };\n\nif (process.env.NODE_ENV !== \"production\") {\n  Form.propTypes = {\n    schema: PropTypes.object.isRequired,\n    uiSchema: PropTypes.object,\n    formData: PropTypes.any,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    widgets: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])),\n    fields: PropTypes.objectOf(PropTypes.elementType),\n    ArrayFieldTemplate: PropTypes.elementType,\n    ObjectFieldTemplate: PropTypes.elementType,\n    FieldTemplate: PropTypes.elementType,\n    ErrorList: PropTypes.func,\n    onChange: PropTypes.func,\n    onError: PropTypes.func,\n    showErrorList: PropTypes.bool,\n    onSubmit: PropTypes.func,\n    id: PropTypes.string,\n    className: PropTypes.string,\n    tagName: PropTypes.elementType,\n    name: PropTypes.string,\n    method: PropTypes.string,\n    target: PropTypes.string,\n    action: PropTypes.string,\n    autocomplete: PropTypes.string,\n    autoComplete: PropTypes.string,\n    enctype: PropTypes.string,\n    acceptcharset: PropTypes.string,\n    noValidate: PropTypes.bool,\n    noHtml5Validate: PropTypes.bool,\n    liveValidate: PropTypes.bool,\n    validate: PropTypes.func,\n    transformErrors: PropTypes.func,\n    formContext: PropTypes.object,\n    customFormats: PropTypes.object,\n    additionalMetaSchemas: PropTypes.arrayOf(PropTypes.object),\n    omitExtraData: PropTypes.bool,\n    extraErrors: PropTypes.object\n  };\n}","map":{"version":3,"mappings":"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","names":["React","Component","PropTypes","_pick","_get","_isEmpty","default","DefaultErrorList","getDefaultFormState","retrieveSchema","shouldRender","toIdSchema","getDefaultRegistry","deepEquals","toPathSchema","isObject","validateFormData","toErrorList","mergeObjects","Form","props","_classCallCheck","_this","_defineProperty","formData","fields","length","_typeof","data","Array","isArray","Object","keys","map","key","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","__rjsf_additionalProperties","$name","push","replace","formValue","newErrorSchema","newState","getStateFromProps","mustValidate","noValidate","liveValidate","state","newFormData","omitExtraData","liveOmit","retrievedSchema","schema","fieldNames","getFieldNames","getUsedFormData","schemaValidation","validate","errors","errorSchema","schemaValidationErrors","schemaValidationErrorSchema","extraErrors","setState","onChange","onBlur","onFocus","event","preventDefault","target","currentTarget","persist","onError","console","error","onSubmit","status","formElement","nextProps","nextState","inputFormData","uiSchema","edit","rootSchema","customFormats","additionalMetaSchemas","getCurrentErrors","currentErrors","idSchema","idPrefix","transformErrors","getRegistry","resolvedSchema","ErrorList","showErrorList","formContext","widgets","ArrayFieldTemplate","ObjectFieldTemplate","FieldTemplate","definitions","dispatchEvent","CustomEvent","cancelable","children","id","className","tagName","name","method","action","deprecatedAutocomplete","autocomplete","currentAutoComplete","autoComplete","enctype","acceptcharset","noHtml5Validate","disabled","readonly","registry","_SchemaField","SchemaField","FormTag","warn","encType","acceptCharset","ref","_this2","form","renderErrors","type","process","env","NODE_ENV","propTypes","object","isRequired","any","bool","objectOf","oneOfType","func","elementType","string","arrayOf"],"sources":["/core/src/components/Form.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport { default as DefaultErrorList } from \"./ErrorList\";\nimport {\n  getDefaultFormState,\n  retrieveSchema,\n  shouldRender,\n  toIdSchema,\n  getDefaultRegistry,\n  deepEquals,\n  toPathSchema,\n  isObject,\n} from \"../utils\";\nimport validateFormData, { toErrorList } from \"../validate\";\nimport { mergeObjects } from \"../utils\";\n\nexport default class Form extends Component {\n  static defaultProps = {\n    uiSchema: {},\n    noValidate: false,\n    liveValidate: false,\n    disabled: false,\n    readonly: false,\n    noHtml5Validate: false,\n    ErrorList: DefaultErrorList,\n    omitExtraData: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = null;\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      this.props.onChange\n    ) {\n      this.props.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  getStateFromProps(props, inputFormData) {\n    const state = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema = \"uiSchema\" in props ? props.uiSchema : this.props.uiSchema;\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    const formData = getDefaultFormState(schema, inputFormData, rootSchema);\n    const retrievedSchema = retrieveSchema(schema, rootSchema, formData);\n    const customFormats = props.customFormats;\n    const additionalMetaSchemas = props.additionalMetaSchemas;\n\n    const getCurrentErrors = () => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(\n        formData,\n        schema,\n        additionalMetaSchemas,\n        customFormats\n      );\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n      schemaValidationErrors = state.schemaValidationErrors;\n      schemaValidationErrorSchema = state.schemaValidationErrorSchema;\n    }\n    if (props.extraErrors) {\n      errorSchema = mergeObjects(\n        errorSchema,\n        props.extraErrors,\n        !!\"concat arrays\"\n      );\n      errors = toErrorList(errorSchema);\n    }\n    const idSchema = toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      rootSchema,\n      formData,\n      props.idPrefix\n    );\n    const nextState = {\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      additionalMetaSchemas,\n    };\n    if (schemaValidationErrors) {\n      nextState.schemaValidationErrors = schemaValidationErrors;\n      nextState.schemaValidationErrorSchema = schemaValidationErrorSchema;\n    }\n    return nextState;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  validate(\n    formData,\n    schema = this.props.schema,\n    additionalMetaSchemas = this.props.additionalMetaSchemas,\n    customFormats = this.props.customFormats\n  ) {\n    const { validate, transformErrors } = this.props;\n    const { rootSchema } = this.getRegistry();\n    const resolvedSchema = retrieveSchema(schema, rootSchema, formData);\n    return validateFormData(\n      formData,\n      resolvedSchema,\n      validate,\n      transformErrors,\n      additionalMetaSchemas,\n      customFormats\n    );\n  }\n\n  renderErrors() {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { ErrorList, showErrorList, formContext } = this.props;\n\n    if (errors.length && showErrorList != false) {\n      return (\n        <ErrorList\n          errors={errors}\n          errorSchema={errorSchema}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  getUsedFormData = (formData, fields) => {\n    //for the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    let data = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map(key => data[key]);\n    }\n\n    return data;\n  };\n\n  getFieldNames = (pathSchema, formData) => {\n    const getAllPaths = (_obj, acc = [], paths = [\"\"]) => {\n      Object.keys(_obj).forEach(key => {\n        if (typeof _obj[key] === \"object\") {\n          let newPaths = paths.map(path => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (_obj[key].__rjsf_additionalProperties && _obj[key].$name !== \"\") {\n            acc.push(_obj[key].$name);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === \"$name\" && _obj[key] !== \"\") {\n          paths.forEach(path => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  onChange = (formData, newErrorSchema) => {\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n    const mustValidate = !this.props.noValidate && this.props.liveValidate;\n    let state = { formData };\n    let newFormData = formData;\n\n    if (this.props.omitExtraData === true && this.props.liveOmit === true) {\n      const retrievedSchema = retrieveSchema(\n        this.state.schema,\n        this.state.schema,\n        formData\n      );\n      const pathSchema = toPathSchema(\n        retrievedSchema,\n        \"\",\n        this.state.schema,\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      let schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (this.props.extraErrors) {\n        errorSchema = mergeObjects(\n          errorSchema,\n          this.props.extraErrors,\n          !!\"concat arrays\"\n        );\n        errors = toErrorList(errorSchema);\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!this.props.noValidate && newErrorSchema) {\n      const errorSchema = this.props.extraErrors\n        ? mergeObjects(\n            newErrorSchema,\n            this.props.extraErrors,\n            !!\"concat arrays\"\n          )\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state,\n      () => this.props.onChange && this.props.onChange(this.state)\n    );\n  };\n\n  onBlur = (...args) => {\n    if (this.props.onBlur) {\n      this.props.onBlur(...args);\n    }\n  };\n\n  onFocus = (...args) => {\n    if (this.props.onFocus) {\n      this.props.onFocus(...args);\n    }\n  };\n\n  onSubmit = event => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    let newFormData = this.state.formData;\n\n    if (this.props.omitExtraData === true) {\n      const retrievedSchema = retrieveSchema(\n        this.state.schema,\n        this.state.schema,\n        newFormData\n      );\n      const pathSchema = toPathSchema(\n        retrievedSchema,\n        \"\",\n        this.state.schema,\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (!this.props.noValidate) {\n      let schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (Object.keys(errors).length > 0) {\n        if (this.props.extraErrors) {\n          errorSchema = mergeObjects(\n            errorSchema,\n            this.props.extraErrors,\n            !!\"concat arrays\"\n          );\n          errors = toErrorList(errorSchema);\n        }\n        this.setState(\n          {\n            errors,\n            errorSchema,\n            schemaValidationErrors,\n            schemaValidationErrorSchema,\n          },\n          () => {\n            if (this.props.onError) {\n              this.props.onError(errors);\n            } else {\n              console.error(\"Form validation failed\", errors);\n            }\n          }\n        );\n        return;\n      }\n    }\n\n    // There are no errors generated through schema validation.\n    // Check for user provided errors and update state accordingly.\n    let errorSchema;\n    let errors;\n    if (this.props.extraErrors) {\n      errorSchema = this.props.extraErrors;\n      errors = toErrorList(errorSchema);\n    } else {\n      errorSchema = {};\n      errors = [];\n    }\n\n    this.setState(\n      {\n        formData: newFormData,\n        errors: errors,\n        errorSchema: errorSchema,\n        schemaValidationErrors: [],\n        schemaValidationErrorSchema: {},\n      },\n      () => {\n        if (this.props.onSubmit) {\n          this.props.onSubmit(\n            { ...this.state, formData: newFormData, status: \"submitted\" },\n            event\n          );\n        }\n      }\n    );\n  };\n\n  getRegistry() {\n    // For BC, accept passed SchemaField and TitleField props and pass them to\n    // the \"fields\" registry one.\n    const { fields, widgets } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      widgets: { ...widgets, ...this.props.widgets },\n      ArrayFieldTemplate: this.props.ArrayFieldTemplate,\n      ObjectFieldTemplate: this.props.ObjectFieldTemplate,\n      FieldTemplate: this.props.FieldTemplate,\n      definitions: this.props.schema.definitions || {},\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || {},\n    };\n  }\n\n  submit() {\n    if (this.formElement) {\n      this.formElement.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n    }\n  }\n\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      className,\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autocomplete: deprecatedAutocomplete,\n      autoComplete: currentAutoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate,\n      disabled,\n      readonly,\n      formContext,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const _SchemaField = registry.fields.SchemaField;\n    const FormTag = tagName ? tagName : \"form\";\n    if (deprecatedAutocomplete) {\n      console.warn(\n        \"Using autocomplete property of Form is deprecated, use autoComplete instead.\"\n      );\n    }\n    const autoComplete = currentAutoComplete\n      ? currentAutoComplete\n      : deprecatedAutocomplete;\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        ref={form => {\n          this.formElement = form;\n        }}>\n        {this.renderErrors()}\n        <_SchemaField\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? (\n          children\n        ) : (\n          <div>\n            <button type=\"submit\" className=\"btn btn-info\">\n              Submit\n            </button>\n          </div>\n        )}\n      </FormTag>\n    );\n  }\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  Form.propTypes = {\n    schema: PropTypes.object.isRequired,\n    uiSchema: PropTypes.object,\n    formData: PropTypes.any,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    widgets: PropTypes.objectOf(\n      PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n    ),\n    fields: PropTypes.objectOf(PropTypes.elementType),\n    ArrayFieldTemplate: PropTypes.elementType,\n    ObjectFieldTemplate: PropTypes.elementType,\n    FieldTemplate: PropTypes.elementType,\n    ErrorList: PropTypes.func,\n    onChange: PropTypes.func,\n    onError: PropTypes.func,\n    showErrorList: PropTypes.bool,\n    onSubmit: PropTypes.func,\n    id: PropTypes.string,\n    className: PropTypes.string,\n    tagName: PropTypes.elementType,\n    name: PropTypes.string,\n    method: PropTypes.string,\n    target: PropTypes.string,\n    action: PropTypes.string,\n    autocomplete: PropTypes.string,\n    autoComplete: PropTypes.string,\n    enctype: PropTypes.string,\n    acceptcharset: PropTypes.string,\n    noValidate: PropTypes.bool,\n    noHtml5Validate: PropTypes.bool,\n    liveValidate: PropTypes.bool,\n    validate: PropTypes.func,\n    transformErrors: PropTypes.func,\n    formContext: PropTypes.object,\n    customFormats: PropTypes.object,\n    additionalMetaSchemas: PropTypes.arrayOf(PropTypes.object),\n    omitExtraData: PropTypes.bool,\n    extraErrors: PropTypes.object,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}