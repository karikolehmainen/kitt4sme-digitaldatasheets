{"ast":null,"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { schemaRequiresTrueValue } from \"../../utils\";\n\nfunction CheckboxWidget(props) {\n  var schema = props.schema,\n      id = props.id,\n      value = props.value,\n      disabled = props.disabled,\n      readonly = props.readonly,\n      label = props.label,\n      autofocus = props.autofocus,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      _onChange = props.onChange,\n      DescriptionField = props.DescriptionField; // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n\n  var required = schemaRequiresTrueValue(schema);\n  return React.createElement(\"div\", {\n    className: \"checkbox \".concat(disabled || readonly ? \"disabled\" : \"\")\n  }, schema.description && React.createElement(DescriptionField, {\n    description: schema.description\n  }), React.createElement(\"label\", null, React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: id,\n    checked: typeof value === \"undefined\" ? false : value,\n    required: required,\n    disabled: disabled || readonly,\n    autoFocus: autofocus,\n    onChange: function onChange(event) {\n      return _onChange(event.target.checked);\n    },\n    onBlur: onBlur && function (event) {\n      return onBlur(id, event.target.checked);\n    },\n    onFocus: onFocus && function (event) {\n      return onFocus(id, event.target.checked);\n    }\n  }), React.createElement(\"span\", null, label)));\n}\n\nCheckboxWidget.defaultProps = {\n  autofocus: false\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  CheckboxWidget.propTypes = {\n    schema: PropTypes.object.isRequired,\n    id: PropTypes.string.isRequired,\n    value: PropTypes.bool,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func\n  };\n}\n\nexport default CheckboxWidget;","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,uBAAT,QAAwC,aAAxC;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA,MAE3BC,MAF2B,GAazBD,KAbyB,CAE3BC,MAF2B;AAAA,MAG3BC,EAH2B,GAazBF,KAbyB,CAG3BE,EAH2B;AAAA,MAI3BC,KAJ2B,GAazBH,KAbyB,CAI3BG,KAJ2B;AAAA,MAK3BC,QAL2B,GAazBJ,KAbyB,CAK3BI,QAL2B;AAAA,MAM3BC,QAN2B,GAazBL,KAbyB,CAM3BK,QAN2B;AAAA,MAO3BC,KAP2B,GAazBN,KAbyB,CAO3BM,KAP2B;AAAA,MAQ3BC,SAR2B,GAazBP,KAbyB,CAQ3BO,SAR2B;AAAA,MAS3BC,MAT2B,GAazBR,KAbyB,CAS3BQ,MAT2B;AAAA,MAU3BC,OAV2B,GAazBT,KAbyB,CAU3BS,OAV2B;AAAA,MAW3BC,SAX2B,GAazBV,KAbyB,CAW3BU,QAX2B;AAAA,MAY3BC,gBAZ2B,GAazBX,KAbyB,CAY3BW,gBAZ2B,EAe7B;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGd,uBAAuB,CAACG,MAAD,CAAxC;AAEA,SACEL;AAAKiB,aAAS,qBAAcT,QAAQ,IAAIC,QAAZD,GAAuB,UAAvBA,GAAoC,EAAlD;AAAd,KACGH,MAAM,CAACa,WAAPb,IACCL,oBAACe,gBAAD;AAAkBG,eAAW,EAAEb,MAAM,CAACa;AAAtC,IAFJ,EAIElB,mCACEA;AACEmB,QAAI,EAAC,UADP;AAEEb,MAAE,EAAEA,EAFN;AAGEc,WAAO,EAAE,OAAOb,KAAP,KAAiB,WAAjB,GAA+B,KAA/B,GAAuCA,KAHlD;AAIES,YAAQ,EAAEA,QAJZ;AAKER,YAAQ,EAAEA,QAAQ,IAAIC,QALxB;AAMEY,aAAS,EAAEV,SANb;AAOEG,YAAQ,EAAE,yBAAK;AAAA,aAAIA,SAAQ,CAACQ,KAAK,CAACC,MAAND,CAAaF,OAAd,CAAZ;AAPjB;AAQER,UAAM,EAAEA,MAAM,IAAK,iBAAK;AAAA,aAAIA,MAAM,CAACN,EAAD,EAAKgB,KAAK,CAACC,MAAND,CAAaF,OAAlB,CAAV;AAR1B;AASEP,WAAO,EAAEA,OAAO,IAAK,iBAAK;AAAA,aAAIA,OAAO,CAACP,EAAD,EAAKgB,KAAK,CAACC,MAAND,CAAaF,OAAlB,CAAX;AAAA;AAT5B,IADF,EAYEpB,kCAAOU,KAAP,CAZF,CAJF,CADF;AAqBD;;AAEDP,cAAc,CAACqB,YAAfrB,GAA8B;AAC5BQ,WAAS,EAAE;AADiB,CAA9BR;;AAIA,IAAIsB,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AACzCtB,gBAAc,CAACyB,SAAfzB,GAA2B;AACzBE,UAAM,EAAEJ,SAAS,CAAC4B,MAAV5B,CAAiB6B,UADA;AAEzBxB,MAAE,EAAEL,SAAS,CAAC8B,MAAV9B,CAAiB6B,UAFI;AAGzBvB,SAAK,EAAEN,SAAS,CAAC+B,IAHQ;AAIzBhB,YAAQ,EAAEf,SAAS,CAAC+B,IAJK;AAKzBxB,YAAQ,EAAEP,SAAS,CAAC+B,IALK;AAMzBvB,YAAQ,EAAER,SAAS,CAAC+B,IANK;AAOzBrB,aAAS,EAAEV,SAAS,CAAC+B,IAPI;AAQzBlB,YAAQ,EAAEb,SAAS,CAACgC;AARK,GAA3B9B;AAUD;;AAED,eAAeA,cAAf","names":["React","PropTypes","schemaRequiresTrueValue","CheckboxWidget","props","schema","id","value","disabled","readonly","label","autofocus","onBlur","onFocus","onChange","DescriptionField","required","className","description","type","checked","autoFocus","event","target","defaultProps","process","env","NODE_ENV","propTypes","object","isRequired","string","bool","func"],"sources":["/core/src/components/widgets/CheckboxWidget.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { schemaRequiresTrueValue } from \"../../utils\";\n\nfunction CheckboxWidget(props) {\n  const {\n    schema,\n    id,\n    value,\n    disabled,\n    readonly,\n    label,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    DescriptionField,\n  } = props;\n\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionField description={schema.description} />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={event => onChange(event.target.checked)}\n          onBlur={onBlur && (event => onBlur(id, event.target.checked))}\n          onFocus={onFocus && (event => onFocus(id, event.target.checked))}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nCheckboxWidget.defaultProps = {\n  autofocus: false,\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  CheckboxWidget.propTypes = {\n    schema: PropTypes.object.isRequired,\n    id: PropTypes.string.isRequired,\n    value: PropTypes.bool,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func,\n  };\n}\n\nexport default CheckboxWidget;\n"]},"metadata":{},"sourceType":"module"}