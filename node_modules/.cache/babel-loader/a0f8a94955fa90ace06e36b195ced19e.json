{"ast":null,"code":"'use strict'; // MODULES //\n\nvar isArray = require('validate.io-array'),\n    isIntegerArray = require('validate.io-integer-array'),\n    isFunction = require('validate.io-function'); // VARIABLES //\n\n\nvar MAXINT = Math.pow(2, 31) - 1; // FUNCTIONS //\n\n/**\n* FUNCTION: gcd( a, b )\n*\tComputes the greatest common divisor of two integers `a` and `b`, using the binary GCD algorithm.\n*\n* @param {Number} a - integer\n* @param {Number} b - integer\n* @returns {Number} greatest common divisor\n*/\n\nfunction gcd(a, b) {\n  var k = 1,\n      t; // Simple cases:\n\n  if (a === 0) {\n    return b;\n  }\n\n  if (b === 0) {\n    return a;\n  } // Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...\n\n\n  while (a % 2 === 0 && b % 2 === 0) {\n    a = a / 2; // right shift\n\n    b = b / 2; // right shift\n\n    k = k * 2; // left shift\n  } // Reduce `a` to an odd number...\n\n\n  while (a % 2 === 0) {\n    a = a / 2; // right shift\n  } // Henceforth, `a` is always odd...\n\n\n  while (b) {\n    // Remove all factors of 2 in `b`, as they are not common...\n    while (b % 2 === 0) {\n      b = b / 2; // right shift\n    } // `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...\n\n\n    if (a > b) {\n      t = b;\n      b = a;\n      a = t;\n    }\n\n    b = b - a; // b=0 iff b=a\n  } // Restore common factors of 2...\n\n\n  return k * a;\n} // end FUNCTION gcd()\n\n/**\n* FUNCTION: bitwise( a, b )\n*\tComputes the greatest common divisor of two integers `a` and `b`, using the binary GCD algorithm and bitwise operations.\n*\n* @param {Number} a - safe integer\n* @param {Number} b - safe integer\n* @returns {Number} greatest common divisor\n*/\n\n\nfunction bitwise(a, b) {\n  var k = 0,\n      t; // Simple cases:\n\n  if (a === 0) {\n    return b;\n  }\n\n  if (b === 0) {\n    return a;\n  } // Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...\n\n\n  while ((a & 1) === 0 && (b & 1) === 0) {\n    a >>>= 1; // right shift\n\n    b >>>= 1; // right shift\n\n    k++;\n  } // Reduce `a` to an odd number...\n\n\n  while ((a & 1) === 0) {\n    a >>>= 1; // right shift\n  } // Henceforth, `a` is always odd...\n\n\n  while (b) {\n    // Remove all factors of 2 in `b`, as they are not common...\n    while ((b & 1) === 0) {\n      b >>>= 1; // right shift\n    } // `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...\n\n\n    if (a > b) {\n      t = b;\n      b = a;\n      a = t;\n    }\n\n    b = b - a; // b=0 iff b=a\n  } // Restore common factors of 2...\n\n\n  return a << k;\n} // end FUNCTION bitwise()\n// GREATEST COMMON DIVISOR //\n\n/**\n* FUNCTION: compute( arr[, clbk] )\n*\tComputes the greatest common divisor.\n*\n* @param {Number[]|Number} arr - input array of integers\n* @param {Function|Number} [clbk] - accessor function for accessing array values\n* @returns {Number|Null} greatest common divisor or null\n*/\n\n\nfunction compute() {\n  var nargs = arguments.length,\n      args,\n      clbk,\n      arr,\n      len,\n      a,\n      b,\n      i; // Copy the input arguments to an array...\n\n  args = new Array(nargs);\n\n  for (i = 0; i < nargs; i++) {\n    args[i] = arguments[i];\n  } // Have we been provided with integer arguments?\n\n\n  if (isIntegerArray(args)) {\n    if (nargs === 2) {\n      a = args[0];\n      b = args[1];\n\n      if (a < 0) {\n        a = -a;\n      }\n\n      if (b < 0) {\n        b = -b;\n      }\n\n      if (a <= MAXINT && b <= MAXINT) {\n        return bitwise(a, b);\n      } else {\n        return gcd(a, b);\n      }\n    }\n\n    arr = args;\n  } // If not integers, ensure the first argument is an array...\n  else if (!isArray(args[0])) {\n    throw new TypeError('gcd()::invalid input argument. Must provide an array of integers. Value: `' + args[0] + '`.');\n  } // Have we been provided with more than one argument? If so, ensure that the accessor argument is a function...\n  else if (nargs > 1) {\n    arr = args[0];\n    clbk = args[1];\n\n    if (!isFunction(clbk)) {\n      throw new TypeError('gcd()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.');\n    }\n  } // We have been provided an array...\n  else {\n    arr = args[0];\n  }\n\n  len = arr.length; // Check if a sufficient number of values have been provided...\n\n  if (len < 2) {\n    return null;\n  } // If an accessor is provided, extract the array values...\n\n\n  if (clbk) {\n    a = new Array(len);\n\n    for (i = 0; i < len; i++) {\n      a[i] = clbk(arr[i], i);\n    }\n\n    arr = a;\n  } // Given an input array, ensure all array values are integers...\n\n\n  if (nargs < 3) {\n    if (!isIntegerArray(arr)) {\n      throw new TypeError('gcd()::invalid input argument. Accessed array values must be integers. Value: `' + arr + '`.');\n    }\n  } // Convert any negative integers to positive integers...\n\n\n  for (i = 0; i < len; i++) {\n    a = arr[i];\n\n    if (a < 0) {\n      arr[i] = -a;\n    }\n  } // Exploit the fact that the gcd is an associative function...\n\n\n  a = arr[0];\n\n  for (i = 1; i < len; i++) {\n    b = arr[i];\n\n    if (b <= MAXINT && a <= MAXINT) {\n      a = bitwise(a, b);\n    } else {\n      a = gcd(a, b);\n    }\n  }\n\n  return a;\n} // end FUNCTION compute()\n// EXPORTS //\n\n\nmodule.exports = compute;","map":{"version":3,"sources":["/home/testvmuser/kitt4sme-digitaldatasheets3/kitt4sme-digitaldatasheets/node_modules/compute-gcd/lib/index.js"],"names":["isArray","require","isIntegerArray","isFunction","MAXINT","Math","pow","gcd","a","b","k","t","bitwise","compute","nargs","arguments","length","args","clbk","arr","len","i","Array","TypeError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// MODULES //\n\nvar isArray = require( 'validate.io-array' ),\n\tisIntegerArray = require( 'validate.io-integer-array' ),\n\tisFunction = require( 'validate.io-function' );\n\n\n// VARIABLES //\n\nvar MAXINT = Math.pow( 2, 31 ) - 1;\n\n\n// FUNCTIONS //\n\n/**\n* FUNCTION: gcd( a, b )\n*\tComputes the greatest common divisor of two integers `a` and `b`, using the binary GCD algorithm.\n*\n* @param {Number} a - integer\n* @param {Number} b - integer\n* @returns {Number} greatest common divisor\n*/\nfunction gcd( a, b ) {\n\tvar k = 1,\n\t\tt;\n\t// Simple cases:\n\tif ( a === 0 ) {\n\t\treturn b;\n\t}\n\tif ( b === 0 ) {\n\t\treturn a;\n\t}\n\t// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...\n\twhile ( a%2 === 0 && b%2 === 0 ) {\n\t\ta = a / 2; // right shift\n\t\tb = b / 2; // right shift\n\t\tk = k * 2; // left shift\n\t}\n\t// Reduce `a` to an odd number...\n\twhile ( a%2 === 0 ) {\n\t\ta = a / 2; // right shift\n\t}\n\t// Henceforth, `a` is always odd...\n\twhile ( b ) {\n\t\t// Remove all factors of 2 in `b`, as they are not common...\n\t\twhile ( b%2 === 0 ) {\n\t\t\tb = b / 2; // right shift\n\t\t}\n\t\t// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...\n\t\tif ( a > b ) {\n\t\t\tt = b;\n\t\t\tb = a;\n\t\t\ta = t;\n\t\t}\n\t\tb = b - a; // b=0 iff b=a\n\t}\n\t// Restore common factors of 2...\n\treturn k * a;\n} // end FUNCTION gcd()\n\n/**\n* FUNCTION: bitwise( a, b )\n*\tComputes the greatest common divisor of two integers `a` and `b`, using the binary GCD algorithm and bitwise operations.\n*\n* @param {Number} a - safe integer\n* @param {Number} b - safe integer\n* @returns {Number} greatest common divisor\n*/\nfunction bitwise( a, b ) {\n\tvar k = 0,\n\t\tt;\n\t// Simple cases:\n\tif ( a === 0 ) {\n\t\treturn b;\n\t}\n\tif ( b === 0 ) {\n\t\treturn a;\n\t}\n\t// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...\n\twhile ( (a & 1) === 0 && (b & 1) === 0 ) {\n\t\ta >>>= 1; // right shift\n\t\tb >>>= 1; // right shift\n\t\tk++;\n\t}\n\t// Reduce `a` to an odd number...\n\twhile ( (a & 1) === 0 ) {\n\t\ta >>>= 1; // right shift\n\t}\n\t// Henceforth, `a` is always odd...\n\twhile ( b ) {\n\t\t// Remove all factors of 2 in `b`, as they are not common...\n\t\twhile ( (b & 1) === 0 ) {\n\t\t\tb >>>= 1; // right shift\n\t\t}\n\t\t// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...\n\t\tif ( a > b ) {\n\t\t\tt = b;\n\t\t\tb = a;\n\t\t\ta = t;\n\t\t}\n\t\tb = b - a; // b=0 iff b=a\n\t}\n\t// Restore common factors of 2...\n\treturn a << k;\n} // end FUNCTION bitwise()\n\n\n// GREATEST COMMON DIVISOR //\n\n/**\n* FUNCTION: compute( arr[, clbk] )\n*\tComputes the greatest common divisor.\n*\n* @param {Number[]|Number} arr - input array of integers\n* @param {Function|Number} [clbk] - accessor function for accessing array values\n* @returns {Number|Null} greatest common divisor or null\n*/\nfunction compute() {\n\tvar nargs = arguments.length,\n\t\targs,\n\t\tclbk,\n\t\tarr,\n\t\tlen,\n\t\ta, b,\n\t\ti;\n\n\t// Copy the input arguments to an array...\n\targs = new Array( nargs );\n\tfor ( i = 0; i < nargs; i++ ) {\n\t\targs[ i ] = arguments[ i ];\n\t}\n\t// Have we been provided with integer arguments?\n\tif ( isIntegerArray( args ) ) {\n\t\tif ( nargs === 2 ) {\n\t\t\ta = args[ 0 ];\n\t\t\tb = args[ 1 ];\n\t\t\tif ( a < 0 ) {\n\t\t\t\ta = -a;\n\t\t\t}\n\t\t\tif ( b < 0 ) {\n\t\t\t\tb = -b;\n\t\t\t}\n\t\t\tif ( a <= MAXINT && b <= MAXINT ) {\n\t\t\t\treturn bitwise( a, b );\n\t\t\t} else {\n\t\t\t\treturn gcd( a, b );\n\t\t\t}\n\t\t}\n\t\tarr = args;\n\t}\n\t// If not integers, ensure the first argument is an array...\n\telse if ( !isArray( args[ 0 ] ) ) {\n\t\tthrow new TypeError( 'gcd()::invalid input argument. Must provide an array of integers. Value: `' + args[ 0 ] + '`.' );\n\t}\n\t// Have we been provided with more than one argument? If so, ensure that the accessor argument is a function...\n\telse if ( nargs > 1 ) {\n\t\tarr = args[ 0 ];\n\t\tclbk = args[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( 'gcd()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.' );\n\t\t}\n\t}\n\t// We have been provided an array...\n\telse {\n\t\tarr = args[ 0 ];\n\t}\n\tlen = arr.length;\n\n\t// Check if a sufficient number of values have been provided...\n\tif ( len < 2 ) {\n\t\treturn null;\n\t}\n\t// If an accessor is provided, extract the array values...\n\tif ( clbk ) {\n\t\ta = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\ta[ i ] = clbk( arr[ i ], i );\n\t\t}\n\t\tarr = a;\n\t}\n\t// Given an input array, ensure all array values are integers...\n\tif ( nargs < 3 ) {\n\t\tif ( !isIntegerArray( arr ) ) {\n\t\t\tthrow new TypeError( 'gcd()::invalid input argument. Accessed array values must be integers. Value: `' + arr + '`.' );\n\t\t}\n\t}\n\t// Convert any negative integers to positive integers...\n\tfor ( i = 0; i < len; i++ ) {\n\t\ta = arr[ i ];\n\t\tif ( a < 0 ) {\n\t\t\tarr[ i ] = -a;\n\t\t}\n\t}\n\t// Exploit the fact that the gcd is an associative function...\n\ta = arr[ 0 ];\n\tfor ( i = 1; i < len; i++ ) {\n\t\tb = arr[ i ];\n\t\tif ( b <= MAXINT && a <= MAXINT ) {\n\t\t\ta = bitwise( a, b );\n\t\t} else {\n\t\t\ta = gcd( a, b );\n\t\t}\n\t}\n\treturn a;\n} // end FUNCTION compute()\n\n\n// EXPORTS //\n\nmodule.exports = compute;\n"]},"metadata":{},"sourceType":"script"}