{"ast":null,"code":"'use strict'; // MODULES //\n\nvar gcd = require('compute-gcd'),\n    isArray = require('validate.io-array'),\n    isIntegerArray = require('validate.io-integer-array'),\n    isFunction = require('validate.io-function'); // LEAST COMMON MULTIPLE //\n\n/**\n* FUNCTION: lcm( arr[, clbk] )\n*\tComputes the least common multiple (lcm).\n*\n* @param {Number[]|Number} arr - input array of integers\n* @param {Function|Number} [accessor] - accessor function for accessing array values\n* @returns {Number|Null} least common multiple or null\n*/\n\n\nfunction lcm() {\n  var nargs = arguments.length,\n      args,\n      clbk,\n      arr,\n      len,\n      a,\n      b,\n      i; // Copy the input arguments to an array...\n\n  args = new Array(nargs);\n\n  for (i = 0; i < nargs; i++) {\n    args[i] = arguments[i];\n  } // Have we been provided with integer arguments?\n\n\n  if (isIntegerArray(args)) {\n    if (nargs === 2) {\n      a = args[0];\n      b = args[1];\n\n      if (a < 0) {\n        a = -a;\n      }\n\n      if (b < 0) {\n        b = -b;\n      }\n\n      if (a === 0 || b === 0) {\n        return 0;\n      }\n\n      return a / gcd(a, b) * b;\n    }\n\n    arr = args;\n  } // If not integers, ensure that the first argument is an array...\n  else if (!isArray(args[0])) {\n    throw new TypeError('lcm()::invalid input argument. Must provide an array of integers. Value: `' + args[0] + '`.');\n  } // Have we been provided with more than one argument? If so, ensure that the accessor argument is a function...\n  else if (nargs > 1) {\n    arr = args[0];\n    clbk = args[1];\n\n    if (!isFunction(clbk)) {\n      throw new TypeError('lcm()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.');\n    }\n  } // We have been provided an array...\n  else {\n    arr = args[0];\n  }\n\n  len = arr.length; // Check if a sufficient number of values have been provided...\n\n  if (len < 2) {\n    return null;\n  } // If an accessor is provided, extract the array values...\n\n\n  if (clbk) {\n    a = new Array(len);\n\n    for (i = 0; i < len; i++) {\n      a[i] = clbk(arr[i], i);\n    }\n\n    arr = a;\n  } // Given an input array, ensure all array values are integers...\n\n\n  if (nargs < 3) {\n    if (!isIntegerArray(arr)) {\n      throw new TypeError('lcm()::invalid input argument. Accessed array values must be integers. Value: `' + arr + '`.');\n    }\n  } // Convert any negative integers to positive integers...\n\n\n  for (i = 0; i < len; i++) {\n    a = arr[i];\n\n    if (a < 0) {\n      arr[i] = -a;\n    }\n  } // Exploit the fact that the lcm is an associative function...\n\n\n  a = arr[0];\n\n  for (i = 1; i < len; i++) {\n    b = arr[i];\n\n    if (a === 0 || b === 0) {\n      return 0;\n    }\n\n    a = a / gcd(a, b) * b;\n  }\n\n  return a;\n} // end FUNCTION lcm()\n// EXPORTS //\n\n\nmodule.exports = lcm;","map":{"version":3,"sources":["/home/testvmuser/kitt4sme-digitaldatasheets3/kitt4sme-digitaldatasheets/node_modules/compute-lcm/lib/index.js"],"names":["gcd","require","isArray","isIntegerArray","isFunction","lcm","nargs","arguments","length","args","clbk","arr","len","a","b","i","Array","TypeError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// MODULES //\n\nvar gcd = require( 'compute-gcd' ),\n\tisArray = require( 'validate.io-array' ),\n\tisIntegerArray = require( 'validate.io-integer-array' ),\n\tisFunction = require( 'validate.io-function' );\n\n\n// LEAST COMMON MULTIPLE //\n\n/**\n* FUNCTION: lcm( arr[, clbk] )\n*\tComputes the least common multiple (lcm).\n*\n* @param {Number[]|Number} arr - input array of integers\n* @param {Function|Number} [accessor] - accessor function for accessing array values\n* @returns {Number|Null} least common multiple or null\n*/\nfunction lcm() {\n\tvar nargs = arguments.length,\n\t\targs,\n\t\tclbk,\n\t\tarr,\n\t\tlen,\n\t\ta, b,\n\t\ti;\n\n\t// Copy the input arguments to an array...\n\targs = new Array( nargs );\n\tfor ( i = 0; i < nargs; i++ ) {\n\t\targs[ i ] = arguments[ i ];\n\t}\n\t// Have we been provided with integer arguments?\n\tif ( isIntegerArray( args ) ) {\n\t\tif ( nargs === 2 ) {\n\t\t\ta = args[ 0 ];\n\t\t\tb = args[ 1 ];\n\t\t\tif ( a < 0 ) {\n\t\t\t\ta = -a;\n\t\t\t}\n\t\t\tif ( b < 0 ) {\n\t\t\t\tb = -b;\n\t\t\t}\n\t\t\tif ( a === 0 || b === 0 ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn ( a/gcd(a,b) ) * b;\n\t\t}\n\t\tarr = args;\n\t}\n\t// If not integers, ensure that the first argument is an array...\n\telse if ( !isArray( args[ 0 ] ) ) {\n\t\tthrow new TypeError( 'lcm()::invalid input argument. Must provide an array of integers. Value: `' + args[ 0 ] + '`.' );\n\t}\n\t// Have we been provided with more than one argument? If so, ensure that the accessor argument is a function...\n\telse if ( nargs > 1 ) {\n\t\tarr = args[ 0 ];\n\t\tclbk = args[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( 'lcm()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.' );\n\t\t}\n\t}\n\t// We have been provided an array...\n\telse {\n\t\tarr = args[ 0 ];\n\t}\n\tlen = arr.length;\n\n\t// Check if a sufficient number of values have been provided...\n\tif ( len < 2 ) {\n\t\treturn null;\n\t}\n\t// If an accessor is provided, extract the array values...\n\tif ( clbk ) {\n\t\ta = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\ta[ i ] = clbk( arr[ i ], i );\n\t\t}\n\t\tarr = a;\n\t}\n\t// Given an input array, ensure all array values are integers...\n\tif ( nargs < 3 ) {\n\t\tif ( !isIntegerArray( arr ) ) {\n\t\t\tthrow new TypeError( 'lcm()::invalid input argument. Accessed array values must be integers. Value: `' + arr + '`.' );\n\t\t}\n\t}\n\t// Convert any negative integers to positive integers...\n\tfor ( i = 0; i < len; i++ ) {\n\t\ta = arr[ i ];\n\t\tif ( a < 0 ) {\n\t\t\tarr[ i ] = -a;\n\t\t}\n\t}\n\t// Exploit the fact that the lcm is an associative function...\n\ta = arr[ 0 ];\n\tfor ( i = 1; i < len; i++ ) {\n\t\tb = arr[ i ];\n\t\tif ( a === 0 || b === 0 ) {\n\t\t\treturn 0;\n\t\t}\n\t\ta = ( a/gcd(a,b) ) * b;\n\t}\n\treturn a;\n} // end FUNCTION lcm()\n\n\n// EXPORTS //\n\nmodule.exports = lcm;\n"]},"metadata":{},"sourceType":"script"}