{"ast":null,"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction selectValue(value, selected, all) {\n  var at = all.indexOf(value);\n  var updated = selected.slice(0, at).concat(value, selected.slice(at)); // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n\n  return updated.sort(function (a, b) {\n    return all.indexOf(a) > all.indexOf(b);\n  });\n}\n\nfunction deselectValue(value, selected) {\n  return selected.filter(function (v) {\n    return v !== value;\n  });\n}\n\nfunction CheckboxesWidget(props) {\n  var id = props.id,\n      disabled = props.disabled,\n      options = props.options,\n      value = props.value,\n      autofocus = props.autofocus,\n      readonly = props.readonly,\n      _onChange = props.onChange;\n  var enumOptions = options.enumOptions,\n      enumDisabled = options.enumDisabled,\n      inline = options.inline;\n  return React.createElement(\"div\", {\n    className: \"checkboxes\",\n    id: id\n  }, enumOptions.map(function (option, index) {\n    var checked = value.indexOf(option.value) !== -1;\n    var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;\n    var disabledCls = disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n    var checkbox = React.createElement(\"span\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"\".concat(id, \"_\").concat(index),\n      checked: checked,\n      disabled: disabled || itemDisabled || readonly,\n      autoFocus: autofocus && index === 0,\n      onChange: function onChange(event) {\n        var all = enumOptions.map(function (_ref) {\n          var value = _ref.value;\n          return value;\n        });\n\n        if (event.target.checked) {\n          _onChange(selectValue(option.value, value, all));\n        } else {\n          _onChange(deselectValue(option.value, value));\n        }\n      }\n    }), React.createElement(\"span\", null, option.label));\n    return inline ? React.createElement(\"label\", {\n      key: index,\n      className: \"checkbox-inline \".concat(disabledCls)\n    }, checkbox) : React.createElement(\"div\", {\n      key: index,\n      className: \"checkbox \".concat(disabledCls)\n    }, React.createElement(\"label\", null, checkbox));\n  }));\n}\n\nCheckboxesWidget.defaultProps = {\n  autofocus: false,\n  options: {\n    inline: false\n  }\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  CheckboxesWidget.propTypes = {\n    schema: PropTypes.object.isRequired,\n    id: PropTypes.string.isRequired,\n    options: PropTypes.shape({\n      enumOptions: PropTypes.array,\n      inline: PropTypes.bool\n    }).isRequired,\n    value: PropTypes.any,\n    required: PropTypes.bool,\n    readonly: PropTypes.bool,\n    disabled: PropTypes.bool,\n    multiple: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func\n  };\n}\n\nexport default CheckboxesWidget;","map":{"version":3,"mappings":"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","names":["React","PropTypes","selectValue","value","selected","all","at","indexOf","updated","slice","concat","sort","a","b","deselectValue","filter","v","CheckboxesWidget","props","id","disabled","options","autofocus","readonly","onChange","enumOptions","enumDisabled","inline","className","map","option","index","checked","itemDisabled","disabledCls","checkbox","type","autoFocus","event","target","label","key","defaultProps","process","env","NODE_ENV","propTypes","schema","object","isRequired","string","shape","array","bool","any","required","multiple","func"],"sources":["/core/src/components/widgets/CheckboxesWidget.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction selectValue(value, selected, all) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => all.indexOf(a) > all.indexOf(b));\n}\n\nfunction deselectValue(value, selected) {\n  return selected.filter(v => v !== value);\n}\n\nfunction CheckboxesWidget(props) {\n  const { id, disabled, options, value, autofocus, readonly, onChange } = props;\n  const { enumOptions, enumDisabled, inline } = options;\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {enumOptions.map((option, index) => {\n        const checked = value.indexOf(option.value) !== -1;\n        const itemDisabled =\n          enumDisabled && enumDisabled.indexOf(option.value) != -1;\n        const disabledCls =\n          disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n        const checkbox = (\n          <span>\n            <input\n              type=\"checkbox\"\n              id={`${id}_${index}`}\n              checked={checked}\n              disabled={disabled || itemDisabled || readonly}\n              autoFocus={autofocus && index === 0}\n              onChange={event => {\n                const all = enumOptions.map(({ value }) => value);\n                if (event.target.checked) {\n                  onChange(selectValue(option.value, value, all));\n                } else {\n                  onChange(deselectValue(option.value, value));\n                }\n              }}\n            />\n            <span>{option.label}</span>\n          </span>\n        );\n        return inline ? (\n          <label key={index} className={`checkbox-inline ${disabledCls}`}>\n            {checkbox}\n          </label>\n        ) : (\n          <div key={index} className={`checkbox ${disabledCls}`}>\n            <label>{checkbox}</label>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nCheckboxesWidget.defaultProps = {\n  autofocus: false,\n  options: {\n    inline: false,\n  },\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  CheckboxesWidget.propTypes = {\n    schema: PropTypes.object.isRequired,\n    id: PropTypes.string.isRequired,\n    options: PropTypes.shape({\n      enumOptions: PropTypes.array,\n      inline: PropTypes.bool,\n    }).isRequired,\n    value: PropTypes.any,\n    required: PropTypes.bool,\n    readonly: PropTypes.bool,\n    disabled: PropTypes.bool,\n    multiple: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func,\n  };\n}\n\nexport default CheckboxesWidget;\n"]},"metadata":{},"sourceType":"module"}