{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as types from \"../../types\";\nimport { getUiOptions, getWidget, guessType, retrieveSchema, getDefaultFormState, getMatchingOption as _getMatchingOption, deepEquals } from \"../../utils\";\n\nvar AnyOfField = /*#__PURE__*/function (_Component) {\n  _inherits(AnyOfField, _Component);\n\n  function AnyOfField(props) {\n    var _this;\n\n    _classCallCheck(this, AnyOfField);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnyOfField).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onOptionChange\", function (option) {\n      var selectedOption = parseInt(option, 10);\n      var _this$props = _this.props,\n          formData = _this$props.formData,\n          onChange = _this$props.onChange,\n          options = _this$props.options,\n          registry = _this$props.registry;\n      var rootSchema = registry.rootSchema;\n      var newOption = retrieveSchema(options[selectedOption], rootSchema, formData); // If the new option is of type object and the current data is an object,\n      // discard properties added using the old option.\n\n      var newFormData = undefined;\n\n      if (guessType(formData) === \"object\" && (newOption.type === \"object\" || newOption.properties)) {\n        newFormData = Object.assign({}, formData);\n        var optionsToDiscard = options.slice();\n        optionsToDiscard.splice(selectedOption, 1); // Discard any data added using other options\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = optionsToDiscard[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _option = _step.value;\n\n            if (_option.properties) {\n              for (var key in _option.properties) {\n                if (newFormData.hasOwnProperty(key)) {\n                  delete newFormData[key];\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } // Call getDefaultFormState to make sure defaults are populated on change.\n\n\n      onChange(getDefaultFormState(options[selectedOption], newFormData, rootSchema));\n\n      _this.setState({\n        selectedOption: parseInt(option, 10)\n      });\n    });\n\n    var _this$props2 = _this.props,\n        _formData = _this$props2.formData,\n        _options = _this$props2.options;\n    _this.state = {\n      selectedOption: _this.getMatchingOption(_formData, _options)\n    };\n    return _this;\n  }\n\n  _createClass(AnyOfField, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (!deepEquals(this.props.formData, prevProps.formData) && this.props.idSchema.$id === prevProps.idSchema.$id) {\n        var matchingOption = this.getMatchingOption(this.props.formData, this.props.options);\n\n        if (!prevState || matchingOption === this.state.selectedOption) {\n          return;\n        }\n\n        this.setState({\n          selectedOption: matchingOption\n        });\n      }\n    }\n  }, {\n    key: \"getMatchingOption\",\n    value: function getMatchingOption(formData, options) {\n      var rootSchema = this.props.registry.rootSchema;\n\n      var option = _getMatchingOption(formData, options, rootSchema);\n\n      if (option !== 0) {\n        return option;\n      } // If the form data matches none of the options, use the currently selected\n      // option, assuming it's available; otherwise use the first option\n\n\n      return this && this.state ? this.state.selectedOption : 0;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          baseType = _this$props3.baseType,\n          disabled = _this$props3.disabled,\n          errorSchema = _this$props3.errorSchema,\n          formData = _this$props3.formData,\n          idPrefix = _this$props3.idPrefix,\n          idSchema = _this$props3.idSchema,\n          onBlur = _this$props3.onBlur,\n          onChange = _this$props3.onChange,\n          onFocus = _this$props3.onFocus,\n          options = _this$props3.options,\n          registry = _this$props3.registry,\n          uiSchema = _this$props3.uiSchema,\n          schema = _this$props3.schema;\n      var _SchemaField = registry.fields.SchemaField;\n      var widgets = registry.widgets;\n      var selectedOption = this.state.selectedOption;\n\n      var _getUiOptions = getUiOptions(uiSchema),\n          _getUiOptions$widget = _getUiOptions.widget,\n          widget = _getUiOptions$widget === void 0 ? \"select\" : _getUiOptions$widget,\n          uiOptions = _objectWithoutProperties(_getUiOptions, [\"widget\"]);\n\n      var Widget = getWidget({\n        type: \"number\"\n      }, widget, widgets);\n      var option = options[selectedOption] || null;\n      var optionSchema;\n\n      if (option) {\n        // If the subschema doesn't declare a type, infer the type from the\n        // parent schema\n        optionSchema = option.type ? option : Object.assign({}, option, {\n          type: baseType\n        });\n      }\n\n      var enumOptions = options.map(function (option, index) {\n        return {\n          label: option.title || \"Option \".concat(index + 1),\n          value: index\n        };\n      });\n      return React.createElement(\"div\", {\n        className: \"panel panel-default panel-body\"\n      }, React.createElement(\"div\", {\n        className: \"form-group\"\n      }, React.createElement(Widget, _extends({\n        id: \"\".concat(idSchema.$id).concat(schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"),\n        schema: {\n          type: \"number\",\n          \"default\": 0\n        },\n        onChange: this.onOptionChange,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        value: selectedOption,\n        options: {\n          enumOptions: enumOptions\n        }\n      }, uiOptions))), option !== null && React.createElement(_SchemaField, {\n        schema: optionSchema,\n        uiSchema: uiSchema,\n        errorSchema: errorSchema,\n        idSchema: idSchema,\n        idPrefix: idPrefix,\n        formData: formData,\n        onChange: onChange,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        registry: registry,\n        disabled: disabled\n      }));\n    }\n  }]);\n\n  return AnyOfField;\n}(Component);\n\nAnyOfField.defaultProps = {\n  disabled: false,\n  errorSchema: {},\n  idSchema: {},\n  uiSchema: {}\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  AnyOfField.propTypes = {\n    options: PropTypes.arrayOf(PropTypes.object).isRequired,\n    baseType: PropTypes.string,\n    uiSchema: PropTypes.object,\n    idSchema: PropTypes.object,\n    formData: PropTypes.any,\n    errorSchema: PropTypes.object,\n    registry: types.registry.isRequired\n  };\n}\n\nexport default AnyOfField;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AACA,SACEC,YADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,cAJF,EAKEC,mBALF,EAMEC,iBAAiB,IAAjBA,kBANF,EAOEC,UAPF,QAQO,aARP;;IAUMC,U;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAAC;;AACjBC,oFAAMF,KAAN;;AADiBG,qEA0CF,kBAAU;AACzB,UAAMC,cAAc,GAAGC,QAAQ,CAACC,MAAD,EAAS,EAAT,CAA/B;AADyB,wBAEyBJ,MAAKF,KAF9B;AAAA,UAEjBO,QAFiB,eAEjBA,QAFiB;AAAA,UAEPC,QAFO,eAEPA,QAFO;AAAA,UAEGC,OAFH,eAEGA,OAFH;AAAA,UAEYC,QAFZ,eAEYA,QAFZ;AAAA,UAGjBC,UAHiB,GAGFD,QAHE,CAGjBC,UAHiB;AAIzB,UAAMC,SAAS,GAAGjB,cAAc,CAC9Bc,OAAO,CAACL,cAAD,CADuB,EAE9BO,UAF8B,EAG9BJ,QAH8B,CAAhC,CAJyB,CAUzB;AACA;;AACA,UAAIM,WAAW,GAAGC,SAAlB;;AACA,UACEpB,SAAS,CAACa,QAAD,CAATb,KAAwB,QAAxBA,KACCkB,SAAS,CAACG,IAAVH,KAAmB,QAAnBA,IAA+BA,SAAS,CAACI,UAD1CtB,CADF,EAGE;AACAmB,mBAAW,GAAGI,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBV,QAAlBU,CAAdJ;AAEA,YAAMM,gBAAgB,GAAGV,OAAO,CAACW,KAARX,EAAzB;AACAU,wBAAgB,CAACE,MAAjBF,CAAwBf,cAAxBe,EAAwC,CAAxCA,EAJA,CAMA;;AANA;AAAA;AAAA;;AAAA;AAOA,+BAAqBA,gBAArB,iBAAqBA,EAArB,2GAAuC;AAAA,gBAA5Bb,OAA4B;;AACrC,gBAAIA,OAAM,CAACU,UAAX,EAAuB;AACrB,mBAAK,IAAMM,GAAX,IAAkBhB,OAAM,CAACU,UAAzB,EAAqC;AACnC,oBAAIH,WAAW,CAACU,cAAZV,CAA2BS,GAA3BT,CAAJ,EAAqC;AACnC,yBAAOA,WAAW,CAACS,GAAD,CAAlB;AACD;AACF;AACF;AACF;AAfD;AAAAE;AAAAC;AAAA;AAAA;AAAA;AAAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBuB,QAiCzB;;;AACAlB,cAAQ,CACNZ,mBAAmB,CAACa,OAAO,CAACL,cAAD,CAAR,EAA0BS,WAA1B,EAAuCF,UAAvC,CADb,CAARH;;AAIAN,YAAKyB,QAAL,CAAc;AACZvB,sBAAc,EAAEC,QAAQ,CAACC,MAAD,EAAS,EAAT;AADZ,OAAd;AAhFiB;;AAAA,uBAGaJ,MAAKF,KAHlB;AAAA,QAGTO,SAHS,gBAGTA,QAHS;AAAA,QAGCE,QAHD,gBAGCA,OAHD;AAKjBP,UAAK0B,KAAL,GAAa;AACXxB,oBAAc,EAAEF,MAAKL,iBAAL,CAAuBU,SAAvB,EAAiCE,QAAjC;AADL,KAAb;AALiB;AAQlB;;;;uCAEkBoB,WAAWC,WAAW;AACvC,UACE,CAAChC,UAAU,CAAC,KAAKE,KAAL,CAAWO,QAAZ,EAAsBsB,SAAS,CAACtB,QAAhC,CAAX,IACA,KAAKP,KAAL,CAAW+B,QAAX,CAAoBC,GAApB,KAA4BH,SAAS,CAACE,QAAVF,CAAmBG,GAFjD,EAGE;AACA,YAAMC,cAAc,GAAG,KAAKpC,iBAAL,CACrB,KAAKG,KAAL,CAAWO,QADU,EAErB,KAAKP,KAAL,CAAWS,OAFU,CAAvB;;AAKA,YAAI,CAACqB,SAAD,IAAcG,cAAc,KAAK,KAAKL,KAAL,CAAWxB,cAAhD,EAAgE;AAC9D;AACD;;AAED,aAAKuB,QAAL,CAAc;AACZvB,wBAAc,EAAE6B;AADJ,SAAd;AAGD;AACF;;;sCAEiB1B,UAAUE,SAAS;AAAA,UAC3BE,UAD2B,GACZ,KAAKX,KAAL,CAAWU,QAAX,CAAfC,UAD2B;;AAGnC,UAAIL,MAAM,GAAGT,kBAAiB,CAACU,QAAD,EAAWE,OAAX,EAAoBE,UAApB,CAA9B;;AACA,UAAIL,MAAM,KAAK,CAAf,EAAkB;AAChB,eAAOA,MAAP;AALiC,QAOnC;AACA;;;AACA,aAAO,QAAQ,KAAKsB,KAAb,GAAqB,KAAKA,KAAL,CAAWxB,cAAhC,GAAiD,CAAxD;AACD;;;6BA6CQ;AAAA,yBAeH,KAAKJ,KAfF;AAAA,UAELkC,QAFK,gBAELA,QAFK;AAAA,UAGLC,QAHK,gBAGLA,QAHK;AAAA,UAILC,WAJK,gBAILA,WAJK;AAAA,UAKL7B,QALK,gBAKLA,QALK;AAAA,UAML8B,QANK,gBAMLA,QANK;AAAA,UAOLN,QAPK,gBAOLA,QAPK;AAAA,UAQLO,MARK,gBAQLA,MARK;AAAA,UASL9B,QATK,gBASLA,QATK;AAAA,UAUL+B,OAVK,gBAULA,OAVK;AAAA,UAWL9B,OAXK,gBAWLA,OAXK;AAAA,UAYLC,QAZK,gBAYLA,QAZK;AAAA,UAaL8B,QAbK,gBAaLA,QAbK;AAAA,UAcLC,MAdK,gBAcLA,MAdK;AAiBP,UAAMC,YAAY,GAAGhC,QAAQ,CAACiC,MAATjC,CAAgBkC,WAArC;AAjBO,UAkBCC,OAlBD,GAkBanC,QAlBb,CAkBCmC,OAlBD;AAAA,UAmBCzC,cAnBD,GAmBoB,KAAKwB,KAAL,CAAnBxB,cAnBD;;AAAA,0BAoBqCZ,YAAY,CAACgD,QAAD,CApBjD;AAAA,+CAoBCM,MApBD;AAAA,UAoBCA,MApBD,qCAoBU,QApBV;AAAA,UAoBuBC,SApBvB;;AAqBP,UAAMC,MAAM,GAAGvD,SAAS,CAAC;AAAEsB,YAAI,EAAE;AAAR,OAAD,EAAqB+B,MAArB,EAA6BD,OAA7B,CAAxB;AAEA,UAAMvC,MAAM,GAAGG,OAAO,CAACL,cAAD,CAAPK,IAA2B,IAA1C;AACA,UAAIwC,YAAJ;;AAEA,UAAI3C,MAAJ,EAAY;AACV;AACA;AACA2C,oBAAY,GAAG3C,MAAM,CAACS,IAAPT,GACXA,MADWA,GAEXW,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBX,MAAlBW,EAA0B;AAAEF,cAAI,EAAEmB;AAAR,SAA1BjB,CAFJgC;AAGD;;AAED,UAAMC,WAAW,GAAGzC,OAAO,CAAC0C,GAAR1C,CAAY,UAACH,MAAD,EAAS8C,KAAT;AAAA,eAAoB;AAClDC,eAAK,EAAE/C,MAAM,CAACgD,KAAPhD,qBAA0B8C,KAAK,GAAG,CAAlC,CAD2C;AAElDG,eAAK,EAAEH;AAF2C,SAApB;AAAZ,QAApB;AAKA,aACEhE;AAAKoE,iBAAS,EAAC;AAAf,SACEpE;AAAKoE,iBAAS,EAAC;AAAf,SACEpE,oBAAC4D,MAAD;AACES,UAAE,YAAK1B,QAAQ,CAACC,GAAd,SACAS,MAAM,CAACiB,KAAPjB,GAAe,gBAAfA,GAAkC,gBADlC,CADJ;AAIEA,cAAM,EAAE;AAAE1B,cAAI,EAAE,QAAR;AAAkB,qBAAS;AAA3B,SAJV;AAKEP,gBAAQ,EAAE,KAAKmD,cALjB;AAMErB,cAAM,EAAEA,MANV;AAOEC,eAAO,EAAEA,OAPX;AAQEgB,aAAK,EAAEnD,cART;AASEK,eAAO,EAAE;AAAEyC,qBAAW,EAAXA;AAAF;AATX,SAUMH,SAVN,EADF,CADF,EAgBGzC,MAAM,KAAK,IAAXA,IACClB,oBAACsD,YAAD;AACED,cAAM,EAAEQ,YADV;AAEET,gBAAQ,EAAEA,QAFZ;AAGEJ,mBAAW,EAAEA,WAHf;AAIEL,gBAAQ,EAAEA,QAJZ;AAKEM,gBAAQ,EAAEA,QALZ;AAME9B,gBAAQ,EAAEA,QANZ;AAOEC,gBAAQ,EAAEA,QAPZ;AAQE8B,cAAM,EAAEA,MARV;AASEC,eAAO,EAAEA,OATX;AAUE7B,gBAAQ,EAAEA,QAVZ;AAWEyB,gBAAQ,EAAEA;AAXZ,QAjBJ,CADF;AAkCD;;;;EA/JsB9C;;AAkKzBU,UAAU,CAAC6D,YAAX7D,GAA0B;AACxBoC,UAAQ,EAAE,KADc;AAExBC,aAAW,EAAE,EAFW;AAGxBL,UAAQ,EAAE,EAHc;AAIxBS,UAAQ,EAAE;AAJc,CAA1BzC;;AAOA,IAAI8D,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AACzC9D,YAAU,CAACiE,SAAXjE,GAAuB;AACrBU,WAAO,EAAEnB,SAAS,CAAC2E,OAAV3E,CAAkBA,SAAS,CAAC4E,MAA5B5E,EAAoC6E,UADxB;AAErBjC,YAAQ,EAAE5C,SAAS,CAAC8E,MAFC;AAGrB5B,YAAQ,EAAElD,SAAS,CAAC4E,MAHC;AAIrBnC,YAAQ,EAAEzC,SAAS,CAAC4E,MAJC;AAKrB3D,YAAQ,EAAEjB,SAAS,CAAC+E,GALC;AAMrBjC,eAAW,EAAE9C,SAAS,CAAC4E,MANF;AAOrBxD,YAAQ,EAAEnB,KAAK,CAACmB,QAANnB,CAAe4E;AAPJ,GAAvBpE;AASD;;AAED,eAAeA,UAAf","names":["React","Component","PropTypes","types","getUiOptions","getWidget","guessType","retrieveSchema","getDefaultFormState","getMatchingOption","deepEquals","AnyOfField","props","_classCallCheck","_this","_defineProperty","selectedOption","parseInt","option","formData","onChange","options","registry","rootSchema","newOption","newFormData","undefined","type","properties","Object","assign","optionsToDiscard","slice","splice","key","hasOwnProperty","_didIteratorError","_iteratorError","_iterator","setState","state","prevProps","prevState","idSchema","$id","matchingOption","baseType","disabled","errorSchema","idPrefix","onBlur","onFocus","uiSchema","schema","_SchemaField","fields","SchemaField","widgets","widget","uiOptions","Widget","optionSchema","enumOptions","map","index","label","title","value","className","id","oneOf","onOptionChange","defaultProps","process","env","NODE_ENV","propTypes","arrayOf","object","isRequired","string","any"],"sources":["/core/src/components/fields/MultiSchemaField.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as types from \"../../types\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  retrieveSchema,\n  getDefaultFormState,\n  getMatchingOption,\n  deepEquals,\n} from \"../../utils\";\n\nclass AnyOfField extends Component {\n  constructor(props) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(formData, options),\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      !deepEquals(this.props.formData, prevProps.formData) &&\n      this.props.idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        this.props.formData,\n        this.props.options\n      );\n\n      if (!prevState || matchingOption === this.state.selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  getMatchingOption(formData, options) {\n    const { rootSchema } = this.props.registry;\n\n    let option = getMatchingOption(formData, options, rootSchema);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return this && this.state ? this.state.selectedOption : 0;\n  }\n\n  onOptionChange = option => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { rootSchema } = registry;\n    const newOption = retrieveSchema(\n      options[selectedOption],\n      rootSchema,\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (newFormData.hasOwnProperty(key)) {\n              delete newFormData[key];\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      getDefaultFormState(options[selectedOption], newFormData, rootSchema)\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  render() {\n    const {\n      baseType,\n      disabled,\n      errorSchema,\n      formData,\n      idPrefix,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n      schema,\n    } = this.props;\n\n    const _SchemaField = registry.fields.SchemaField;\n    const { widgets } = registry;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions(uiSchema);\n    const Widget = getWidget({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option, index) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={`${idSchema.$id}${\n              schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n            }`}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            {...uiOptions}\n          />\n        </div>\n\n        {option !== null && (\n          <_SchemaField\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            formData={formData}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nAnyOfField.defaultProps = {\n  disabled: false,\n  errorSchema: {},\n  idSchema: {},\n  uiSchema: {},\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  AnyOfField.propTypes = {\n    options: PropTypes.arrayOf(PropTypes.object).isRequired,\n    baseType: PropTypes.string,\n    uiSchema: PropTypes.object,\n    idSchema: PropTypes.object,\n    formData: PropTypes.any,\n    errorSchema: PropTypes.object,\n    registry: types.registry.isRequired,\n  };\n}\n\nexport default AnyOfField;\n"]},"metadata":{},"sourceType":"module"}